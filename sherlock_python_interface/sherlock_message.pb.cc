// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sherlock_message.proto

#include "sherlock_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sherlock_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_interval_sherlock_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sherlock_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_linear_combo_sherlock_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sherlock_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mapping_sherlock_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sherlock_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_network_sherlock_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sherlock_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_objective_sherlock_5fmessage_2eproto;
namespace sherlock {
class networkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<network> _instance;
} _network_default_instance_;
class mappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapping> _instance;
} _mapping_default_instance_;
class intervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<interval> _instance;
} _interval_default_instance_;
class linear_comboDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<linear_combo> _instance;
} _linear_combo_default_instance_;
class objectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<objective> _instance;
} _objective_default_instance_;
class sherlock_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sherlock_message> _instance;
} _sherlock_message_default_instance_;
}  // namespace sherlock
static void InitDefaultsscc_info_interval_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_interval_default_instance_;
    new (ptr) ::sherlock::interval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::interval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_interval_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_interval_sherlock_5fmessage_2eproto}, {
      &scc_info_mapping_sherlock_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_linear_combo_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_linear_combo_default_instance_;
    new (ptr) ::sherlock::linear_combo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::linear_combo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_linear_combo_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_linear_combo_sherlock_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_mapping_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_mapping_default_instance_;
    new (ptr) ::sherlock::mapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::mapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mapping_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_mapping_sherlock_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_network_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_network_default_instance_;
    new (ptr) ::sherlock::network();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::network::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_network_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_network_sherlock_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_objective_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_objective_default_instance_;
    new (ptr) ::sherlock::objective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::objective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_objective_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_objective_sherlock_5fmessage_2eproto}, {
      &scc_info_linear_combo_sherlock_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_sherlock_message_sherlock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sherlock::_sherlock_message_default_instance_;
    new (ptr) ::sherlock::sherlock_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sherlock::sherlock_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_sherlock_message_sherlock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_sherlock_message_sherlock_5fmessage_2eproto}, {
      &scc_info_network_sherlock_5fmessage_2eproto.base,
      &scc_info_interval_sherlock_5fmessage_2eproto.base,
      &scc_info_objective_sherlock_5fmessage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sherlock_5fmessage_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sherlock_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sherlock_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sherlock_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::network, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::network, onnx_filename_),
  PROTOBUF_FIELD_OFFSET(::sherlock::network, old_format_filename_),
  PROTOBUF_FIELD_OFFSET(::sherlock::network, input_node_indices_),
  PROTOBUF_FIELD_OFFSET(::sherlock::network, output_node_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::mapping, node_index_),
  PROTOBUF_FIELD_OFFSET(::sherlock::mapping, upper_limit_),
  PROTOBUF_FIELD_OFFSET(::sherlock::mapping, lower_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::interval, limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::linear_combo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::linear_combo, coefficient_),
  PROTOBUF_FIELD_OFFSET(::sherlock::linear_combo, node_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::objective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::objective, linear_terms_),
  PROTOBUF_FIELD_OFFSET(::sherlock::objective, direction_),
  PROTOBUF_FIELD_OFFSET(::sherlock::objective, status_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, network_description_),
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, input_interval_),
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, optimization_problem_),
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, output_interval_),
  PROTOBUF_FIELD_OFFSET(::sherlock::sherlock_message, status_flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sherlock::network)},
  { 9, -1, sizeof(::sherlock::mapping)},
  { 17, -1, sizeof(::sherlock::interval)},
  { 23, -1, sizeof(::sherlock::linear_combo)},
  { 30, -1, sizeof(::sherlock::objective)},
  { 38, -1, sizeof(::sherlock::sherlock_message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_network_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_mapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_interval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_linear_combo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_objective_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sherlock::_sherlock_message_default_instance_),
};

const char descriptor_table_protodef_sherlock_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026sherlock_message.proto\022\010sherlock\"v\n\007ne"
  "twork\022\025\n\ronnx_filename\030\001 \001(\t\022\033\n\023old_form"
  "at_filename\030\002 \001(\t\022\032\n\022input_node_indices\030"
  "\003 \003(\005\022\033\n\023output_node_indices\030\004 \003(\005\"G\n\007ma"
  "pping\022\022\n\nnode_index\030\001 \001(\005\022\023\n\013upper_limit"
  "\030\002 \001(\002\022\023\n\013lower_limit\030\003 \001(\002\"-\n\010interval\022"
  "!\n\006limits\030\001 \003(\0132\021.sherlock.mapping\"7\n\014li"
  "near_combo\022\023\n\013coefficient\030\001 \001(\002\022\022\n\nnode_"
  "index\030\002 \001(\005\"\311\001\n\tobjective\022,\n\014linear_term"
  "s\030\001 \003(\0132\026.sherlock.linear_combo\022\021\n\tdirec"
  "tion\030\002 \001(\010\022<\n\013status_flag\030\003 \001(\0162\'.sherlo"
  "ck.objective.optimization_status\"=\n\023opti"
  "mization_status\022\017\n\013NOT_STARTED\020\000\022\013\n\007STAR"
  "TED\020\001\022\010\n\004DONE\020\002\"\343\001\n\020sherlock_message\022.\n\023"
  "network_description\030\001 \001(\0132\021.sherlock.net"
  "work\022*\n\016input_interval\030\002 \001(\0132\022.sherlock."
  "interval\0221\n\024optimization_problem\030\004 \001(\0132\023"
  ".sherlock.objective\022+\n\017output_interval\030\003"
  " \001(\0132\022.sherlock.interval\022\023\n\013status_flag\030"
  "\005 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sherlock_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sherlock_5fmessage_2eproto_sccs[6] = {
  &scc_info_interval_sherlock_5fmessage_2eproto.base,
  &scc_info_linear_combo_sherlock_5fmessage_2eproto.base,
  &scc_info_mapping_sherlock_5fmessage_2eproto.base,
  &scc_info_network_sherlock_5fmessage_2eproto.base,
  &scc_info_objective_sherlock_5fmessage_2eproto.base,
  &scc_info_sherlock_message_sherlock_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sherlock_5fmessage_2eproto_once;
static bool descriptor_table_sherlock_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sherlock_5fmessage_2eproto = {
  &descriptor_table_sherlock_5fmessage_2eproto_initialized, descriptor_table_protodef_sherlock_5fmessage_2eproto, "sherlock_message.proto", 773,
  &descriptor_table_sherlock_5fmessage_2eproto_once, descriptor_table_sherlock_5fmessage_2eproto_sccs, descriptor_table_sherlock_5fmessage_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_sherlock_5fmessage_2eproto::offsets,
  file_level_metadata_sherlock_5fmessage_2eproto, 6, file_level_enum_descriptors_sherlock_5fmessage_2eproto, file_level_service_descriptors_sherlock_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sherlock_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sherlock_5fmessage_2eproto), true);
namespace sherlock {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* objective_optimization_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sherlock_5fmessage_2eproto);
  return file_level_enum_descriptors_sherlock_5fmessage_2eproto[0];
}
bool objective_optimization_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr objective_optimization_status objective::NOT_STARTED;
constexpr objective_optimization_status objective::STARTED;
constexpr objective_optimization_status objective::DONE;
constexpr objective_optimization_status objective::optimization_status_MIN;
constexpr objective_optimization_status objective::optimization_status_MAX;
constexpr int objective::optimization_status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void network::InitAsDefaultInstance() {
}
class network::_Internal {
 public:
};

network::network()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.network)
}
network::network(const network& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_node_indices_(from.input_node_indices_),
      output_node_indices_(from.output_node_indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onnx_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.onnx_filename().empty()) {
    onnx_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onnx_filename_);
  }
  old_format_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.old_format_filename().empty()) {
    old_format_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_format_filename_);
  }
  // @@protoc_insertion_point(copy_constructor:sherlock.network)
}

void network::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_network_sherlock_5fmessage_2eproto.base);
  onnx_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_format_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

network::~network() {
  // @@protoc_insertion_point(destructor:sherlock.network)
  SharedDtor();
}

void network::SharedDtor() {
  onnx_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_format_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const network& network::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_network_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void network::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_node_indices_.Clear();
  output_node_indices_.Clear();
  onnx_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_format_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* network::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string onnx_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_onnx_filename(), ptr, ctx, "sherlock.network.onnx_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_format_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_old_format_filename(), ptr, ctx, "sherlock.network.old_format_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 input_node_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_input_node_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_input_node_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_node_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_output_node_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_output_node_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool network::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.network)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string onnx_filename = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_onnx_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->onnx_filename().data(), static_cast<int>(this->onnx_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sherlock.network.onnx_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_format_filename = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_old_format_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->old_format_filename().data(), static_cast<int>(this->old_format_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sherlock.network.old_format_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_node_indices = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_node_indices())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_input_node_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 output_node_indices = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_node_indices())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_output_node_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.network)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void network::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onnx_filename = 1;
  if (this->onnx_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->onnx_filename().data(), static_cast<int>(this->onnx_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sherlock.network.onnx_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->onnx_filename(), output);
  }

  // string old_format_filename = 2;
  if (this->old_format_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->old_format_filename().data(), static_cast<int>(this->old_format_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sherlock.network.old_format_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_format_filename(), output);
  }

  // repeated int32 input_node_indices = 3;
  if (this->input_node_indices_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_node_indices_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->input_node_indices_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->input_node_indices(i), output);
  }

  // repeated int32 output_node_indices = 4;
  if (this->output_node_indices_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_node_indices_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->output_node_indices_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->output_node_indices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.network)
}

::PROTOBUF_NAMESPACE_ID::uint8* network::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onnx_filename = 1;
  if (this->onnx_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->onnx_filename().data(), static_cast<int>(this->onnx_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sherlock.network.onnx_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->onnx_filename(), target);
  }

  // string old_format_filename = 2;
  if (this->old_format_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->old_format_filename().data(), static_cast<int>(this->old_format_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sherlock.network.old_format_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->old_format_filename(), target);
  }

  // repeated int32 input_node_indices = 3;
  if (this->input_node_indices_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _input_node_indices_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_node_indices_, target);
  }

  // repeated int32 output_node_indices = 4;
  if (this->output_node_indices_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _output_node_indices_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_node_indices_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.network)
  return target;
}

size_t network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.network)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_node_indices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_node_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_node_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 output_node_indices = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_node_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_node_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string onnx_filename = 1;
  if (this->onnx_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->onnx_filename());
  }

  // string old_format_filename = 2;
  if (this->old_format_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->old_format_filename());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void network::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.network)
  GOOGLE_DCHECK_NE(&from, this);
  const network* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<network>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.network)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.network)
    MergeFrom(*source);
  }
}

void network::MergeFrom(const network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_node_indices_.MergeFrom(from.input_node_indices_);
  output_node_indices_.MergeFrom(from.output_node_indices_);
  if (from.onnx_filename().size() > 0) {

    onnx_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onnx_filename_);
  }
  if (from.old_format_filename().size() > 0) {

    old_format_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_format_filename_);
  }
}

void network::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void network::CopyFrom(const network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool network::IsInitialized() const {
  return true;
}

void network::InternalSwap(network* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_node_indices_.InternalSwap(&other->input_node_indices_);
  output_node_indices_.InternalSwap(&other->output_node_indices_);
  onnx_filename_.Swap(&other->onnx_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  old_format_filename_.Swap(&other->old_format_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata network::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapping::InitAsDefaultInstance() {
}
class mapping::_Internal {
 public:
};

mapping::mapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.mapping)
}
mapping::mapping(const mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_index_, &from.node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_) -
    reinterpret_cast<char*>(&node_index_)) + sizeof(lower_limit_));
  // @@protoc_insertion_point(copy_constructor:sherlock.mapping)
}

void mapping::SharedCtor() {
  ::memset(&node_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&node_index_)) + sizeof(lower_limit_));
}

mapping::~mapping() {
  // @@protoc_insertion_point(destructor:sherlock.mapping)
  SharedDtor();
}

void mapping::SharedDtor() {
}

void mapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapping& mapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapping_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.mapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_) -
      reinterpret_cast<char*>(&node_index_)) + sizeof(lower_limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float upper_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lower_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mapping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.mapping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float upper_limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lower_limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.mapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mapping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.mapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_index = 1;
  if (this->node_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->node_index(), output);
  }

  // float upper_limit = 2;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->upper_limit(), output);
  }

  // float lower_limit = 3;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->lower_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.mapping)
}

::PROTOBUF_NAMESPACE_ID::uint8* mapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.mapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_index = 1;
  if (this->node_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->node_index(), target);
  }

  // float upper_limit = 2;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->upper_limit(), target);
  }

  // float lower_limit = 3;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->lower_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.mapping)
  return target;
}

size_t mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.mapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 node_index = 1;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  // float upper_limit = 2;
  if (!(this->upper_limit() <= 0 && this->upper_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float lower_limit = 3;
  if (!(this->lower_limit() <= 0 && this->lower_limit() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.mapping)
  GOOGLE_DCHECK_NE(&from, this);
  const mapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.mapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.mapping)
    MergeFrom(*source);
  }
}

void mapping::MergeFrom(const mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.mapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
  if (!(from.upper_limit() <= 0 && from.upper_limit() >= 0)) {
    set_upper_limit(from.upper_limit());
  }
  if (!(from.lower_limit() <= 0 && from.lower_limit() >= 0)) {
    set_lower_limit(from.lower_limit());
  }
}

void mapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapping::CopyFrom(const mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapping::IsInitialized() const {
  return true;
}

void mapping::InternalSwap(mapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_index_, other->node_index_);
  swap(upper_limit_, other->upper_limit_);
  swap(lower_limit_, other->lower_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void interval::InitAsDefaultInstance() {
}
class interval::_Internal {
 public:
};

interval::interval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.interval)
}
interval::interval(const interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sherlock.interval)
}

void interval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_interval_sherlock_5fmessage_2eproto.base);
}

interval::~interval() {
  // @@protoc_insertion_point(destructor:sherlock.interval)
  SharedDtor();
}

void interval::SharedDtor() {
}

void interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const interval& interval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_interval_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void interval::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* interval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sherlock.mapping limits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool interval::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.interval)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sherlock.mapping limits = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.interval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.interval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void interval::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sherlock.mapping limits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->limits(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.interval)
}

::PROTOBUF_NAMESPACE_ID::uint8* interval::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sherlock.mapping limits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->limits(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.interval)
  return target;
}

size_t interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.interval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sherlock.mapping limits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void interval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.interval)
  GOOGLE_DCHECK_NE(&from, this);
  const interval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<interval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.interval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.interval)
    MergeFrom(*source);
  }
}

void interval::MergeFrom(const interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
}

void interval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interval::CopyFrom(const interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interval::IsInitialized() const {
  return true;
}

void interval::InternalSwap(interval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata interval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void linear_combo::InitAsDefaultInstance() {
}
class linear_combo::_Internal {
 public:
};

linear_combo::linear_combo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.linear_combo)
}
linear_combo::linear_combo(const linear_combo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coefficient_, &from.coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&coefficient_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:sherlock.linear_combo)
}

void linear_combo::SharedCtor() {
  ::memset(&coefficient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&coefficient_)) + sizeof(node_index_));
}

linear_combo::~linear_combo() {
  // @@protoc_insertion_point(destructor:sherlock.linear_combo)
  SharedDtor();
}

void linear_combo::SharedDtor() {
}

void linear_combo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const linear_combo& linear_combo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_linear_combo_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void linear_combo::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.linear_combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coefficient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&coefficient_)) + sizeof(node_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* linear_combo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float coefficient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool linear_combo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.linear_combo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float coefficient = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.linear_combo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.linear_combo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void linear_combo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.linear_combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coefficient = 1;
  if (!(this->coefficient() <= 0 && this->coefficient() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->coefficient(), output);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.linear_combo)
}

::PROTOBUF_NAMESPACE_ID::uint8* linear_combo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.linear_combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coefficient = 1;
  if (!(this->coefficient() <= 0 && this->coefficient() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->coefficient(), target);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.linear_combo)
  return target;
}

size_t linear_combo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.linear_combo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float coefficient = 1;
  if (!(this->coefficient() <= 0 && this->coefficient() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void linear_combo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.linear_combo)
  GOOGLE_DCHECK_NE(&from, this);
  const linear_combo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<linear_combo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.linear_combo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.linear_combo)
    MergeFrom(*source);
  }
}

void linear_combo::MergeFrom(const linear_combo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.linear_combo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.coefficient() <= 0 && from.coefficient() >= 0)) {
    set_coefficient(from.coefficient());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void linear_combo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.linear_combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void linear_combo::CopyFrom(const linear_combo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.linear_combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool linear_combo::IsInitialized() const {
  return true;
}

void linear_combo::InternalSwap(linear_combo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coefficient_, other->coefficient_);
  swap(node_index_, other->node_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata linear_combo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void objective::InitAsDefaultInstance() {
}
class objective::_Internal {
 public:
};

objective::objective()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.objective)
}
objective::objective(const objective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      linear_terms_(from.linear_terms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_flag_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(status_flag_));
  // @@protoc_insertion_point(copy_constructor:sherlock.objective)
}

void objective::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_objective_sherlock_5fmessage_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_flag_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(status_flag_));
}

objective::~objective() {
  // @@protoc_insertion_point(destructor:sherlock.objective)
  SharedDtor();
}

void objective::SharedDtor() {
}

void objective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const objective& objective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_objective_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void objective::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.objective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linear_terms_.Clear();
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_flag_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(status_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* objective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sherlock.linear_combo linear_terms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_linear_terms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bool direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sherlock.objective.optimization_status status_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_flag(static_cast<::sherlock::objective_optimization_status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool objective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.objective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sherlock.linear_combo linear_terms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_linear_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool direction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sherlock.objective.optimization_status status_flag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_flag(static_cast< ::sherlock::objective_optimization_status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.objective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.objective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void objective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.objective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sherlock.linear_combo linear_terms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linear_terms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->linear_terms(static_cast<int>(i)),
      output);
  }

  // bool direction = 2;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->direction(), output);
  }

  // .sherlock.objective.optimization_status status_flag = 3;
  if (this->status_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->status_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.objective)
}

::PROTOBUF_NAMESPACE_ID::uint8* objective::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.objective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sherlock.linear_combo linear_terms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linear_terms_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->linear_terms(static_cast<int>(i)), target);
  }

  // bool direction = 2;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->direction(), target);
  }

  // .sherlock.objective.optimization_status status_flag = 3;
  if (this->status_flag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->status_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.objective)
  return target;
}

size_t objective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.objective)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sherlock.linear_combo linear_terms = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->linear_terms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->linear_terms(static_cast<int>(i)));
    }
  }

  // bool direction = 2;
  if (this->direction() != 0) {
    total_size += 1 + 1;
  }

  // .sherlock.objective.optimization_status status_flag = 3;
  if (this->status_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_flag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void objective::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.objective)
  GOOGLE_DCHECK_NE(&from, this);
  const objective* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<objective>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.objective)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.objective)
    MergeFrom(*source);
  }
}

void objective::MergeFrom(const objective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.objective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linear_terms_.MergeFrom(from.linear_terms_);
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.status_flag() != 0) {
    set_status_flag(from.status_flag());
  }
}

void objective::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void objective::CopyFrom(const objective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool objective::IsInitialized() const {
  return true;
}

void objective::InternalSwap(objective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&linear_terms_)->InternalSwap(CastToBase(&other->linear_terms_));
  swap(direction_, other->direction_);
  swap(status_flag_, other->status_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata objective::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sherlock_message::InitAsDefaultInstance() {
  ::sherlock::_sherlock_message_default_instance_._instance.get_mutable()->network_description_ = const_cast< ::sherlock::network*>(
      ::sherlock::network::internal_default_instance());
  ::sherlock::_sherlock_message_default_instance_._instance.get_mutable()->input_interval_ = const_cast< ::sherlock::interval*>(
      ::sherlock::interval::internal_default_instance());
  ::sherlock::_sherlock_message_default_instance_._instance.get_mutable()->optimization_problem_ = const_cast< ::sherlock::objective*>(
      ::sherlock::objective::internal_default_instance());
  ::sherlock::_sherlock_message_default_instance_._instance.get_mutable()->output_interval_ = const_cast< ::sherlock::interval*>(
      ::sherlock::interval::internal_default_instance());
}
class sherlock_message::_Internal {
 public:
  static const ::sherlock::network& network_description(const sherlock_message* msg);
  static const ::sherlock::interval& input_interval(const sherlock_message* msg);
  static const ::sherlock::objective& optimization_problem(const sherlock_message* msg);
  static const ::sherlock::interval& output_interval(const sherlock_message* msg);
};

const ::sherlock::network&
sherlock_message::_Internal::network_description(const sherlock_message* msg) {
  return *msg->network_description_;
}
const ::sherlock::interval&
sherlock_message::_Internal::input_interval(const sherlock_message* msg) {
  return *msg->input_interval_;
}
const ::sherlock::objective&
sherlock_message::_Internal::optimization_problem(const sherlock_message* msg) {
  return *msg->optimization_problem_;
}
const ::sherlock::interval&
sherlock_message::_Internal::output_interval(const sherlock_message* msg) {
  return *msg->output_interval_;
}
sherlock_message::sherlock_message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sherlock.sherlock_message)
}
sherlock_message::sherlock_message(const sherlock_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_description()) {
    network_description_ = new ::sherlock::network(*from.network_description_);
  } else {
    network_description_ = nullptr;
  }
  if (from.has_input_interval()) {
    input_interval_ = new ::sherlock::interval(*from.input_interval_);
  } else {
    input_interval_ = nullptr;
  }
  if (from.has_output_interval()) {
    output_interval_ = new ::sherlock::interval(*from.output_interval_);
  } else {
    output_interval_ = nullptr;
  }
  if (from.has_optimization_problem()) {
    optimization_problem_ = new ::sherlock::objective(*from.optimization_problem_);
  } else {
    optimization_problem_ = nullptr;
  }
  status_flag_ = from.status_flag_;
  // @@protoc_insertion_point(copy_constructor:sherlock.sherlock_message)
}

void sherlock_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sherlock_message_sherlock_5fmessage_2eproto.base);
  ::memset(&network_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_flag_) -
      reinterpret_cast<char*>(&network_description_)) + sizeof(status_flag_));
}

sherlock_message::~sherlock_message() {
  // @@protoc_insertion_point(destructor:sherlock.sherlock_message)
  SharedDtor();
}

void sherlock_message::SharedDtor() {
  if (this != internal_default_instance()) delete network_description_;
  if (this != internal_default_instance()) delete input_interval_;
  if (this != internal_default_instance()) delete output_interval_;
  if (this != internal_default_instance()) delete optimization_problem_;
}

void sherlock_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sherlock_message& sherlock_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sherlock_message_sherlock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void sherlock_message::Clear() {
// @@protoc_insertion_point(message_clear_start:sherlock.sherlock_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && network_description_ != nullptr) {
    delete network_description_;
  }
  network_description_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_interval_ != nullptr) {
    delete input_interval_;
  }
  input_interval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_interval_ != nullptr) {
    delete output_interval_;
  }
  output_interval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optimization_problem_ != nullptr) {
    delete optimization_problem_;
  }
  optimization_problem_ = nullptr;
  status_flag_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sherlock_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sherlock.network network_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_network_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sherlock.interval input_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_input_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sherlock.interval output_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_output_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sherlock.objective optimization_problem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_optimization_problem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sherlock_message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sherlock.sherlock_message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sherlock.network network_description = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sherlock.interval input_interval = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sherlock.interval output_interval = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_output_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sherlock.objective optimization_problem = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_optimization_problem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool status_flag = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sherlock.sherlock_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sherlock.sherlock_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sherlock_message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sherlock.sherlock_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sherlock.network network_description = 1;
  if (this->has_network_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::network_description(this), output);
  }

  // .sherlock.interval input_interval = 2;
  if (this->has_input_interval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::input_interval(this), output);
  }

  // .sherlock.interval output_interval = 3;
  if (this->has_output_interval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::output_interval(this), output);
  }

  // .sherlock.objective optimization_problem = 4;
  if (this->has_optimization_problem()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::optimization_problem(this), output);
  }

  // bool status_flag = 5;
  if (this->status_flag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->status_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sherlock.sherlock_message)
}

::PROTOBUF_NAMESPACE_ID::uint8* sherlock_message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sherlock.sherlock_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sherlock.network network_description = 1;
  if (this->has_network_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::network_description(this), target);
  }

  // .sherlock.interval input_interval = 2;
  if (this->has_input_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::input_interval(this), target);
  }

  // .sherlock.interval output_interval = 3;
  if (this->has_output_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::output_interval(this), target);
  }

  // .sherlock.objective optimization_problem = 4;
  if (this->has_optimization_problem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::optimization_problem(this), target);
  }

  // bool status_flag = 5;
  if (this->status_flag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->status_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sherlock.sherlock_message)
  return target;
}

size_t sherlock_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sherlock.sherlock_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sherlock.network network_description = 1;
  if (this->has_network_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_description_);
  }

  // .sherlock.interval input_interval = 2;
  if (this->has_input_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_interval_);
  }

  // .sherlock.interval output_interval = 3;
  if (this->has_output_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_interval_);
  }

  // .sherlock.objective optimization_problem = 4;
  if (this->has_optimization_problem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_problem_);
  }

  // bool status_flag = 5;
  if (this->status_flag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sherlock_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sherlock.sherlock_message)
  GOOGLE_DCHECK_NE(&from, this);
  const sherlock_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sherlock_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sherlock.sherlock_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sherlock.sherlock_message)
    MergeFrom(*source);
  }
}

void sherlock_message::MergeFrom(const sherlock_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sherlock.sherlock_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_description()) {
    mutable_network_description()->::sherlock::network::MergeFrom(from.network_description());
  }
  if (from.has_input_interval()) {
    mutable_input_interval()->::sherlock::interval::MergeFrom(from.input_interval());
  }
  if (from.has_output_interval()) {
    mutable_output_interval()->::sherlock::interval::MergeFrom(from.output_interval());
  }
  if (from.has_optimization_problem()) {
    mutable_optimization_problem()->::sherlock::objective::MergeFrom(from.optimization_problem());
  }
  if (from.status_flag() != 0) {
    set_status_flag(from.status_flag());
  }
}

void sherlock_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sherlock.sherlock_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sherlock_message::CopyFrom(const sherlock_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sherlock.sherlock_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sherlock_message::IsInitialized() const {
  return true;
}

void sherlock_message::InternalSwap(sherlock_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(network_description_, other->network_description_);
  swap(input_interval_, other->input_interval_);
  swap(output_interval_, other->output_interval_);
  swap(optimization_problem_, other->optimization_problem_);
  swap(status_flag_, other->status_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sherlock_message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sherlock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sherlock::network* Arena::CreateMaybeMessage< ::sherlock::network >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::network >(arena);
}
template<> PROTOBUF_NOINLINE ::sherlock::mapping* Arena::CreateMaybeMessage< ::sherlock::mapping >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::sherlock::interval* Arena::CreateMaybeMessage< ::sherlock::interval >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::interval >(arena);
}
template<> PROTOBUF_NOINLINE ::sherlock::linear_combo* Arena::CreateMaybeMessage< ::sherlock::linear_combo >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::linear_combo >(arena);
}
template<> PROTOBUF_NOINLINE ::sherlock::objective* Arena::CreateMaybeMessage< ::sherlock::objective >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::objective >(arena);
}
template<> PROTOBUF_NOINLINE ::sherlock::sherlock_message* Arena::CreateMaybeMessage< ::sherlock::sherlock_message >(Arena* arena) {
  return Arena::CreateInternal< ::sherlock::sherlock_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
